CREATE DATABASE FunkoWarehouse;
USE FunkoWarehouse;

## CREATE TABLES ##

DROP TABLE IF EXISTS LINE;
CREATE TABLE LINE 
(LINE_ID VARCHAR(4) PRIMARY KEY,
CATEGORY CHAR(10),
LINE_NAME CHAR(50),
STATUS CHAR(8) 
);

DROP TABLE IF EXISTS PRODUCT;
CREATE TABLE PRODUCT 
(PRODUCT_ID VARCHAR(4) PRIMARY KEY,
LINE_ID VARCHAR(4),
PRODUCT_NAME CHAR(50),
EXCLUSIVITY CHAR(50),
CHASE_VARIANT CHAR(3),
QUANTITY CHAR(6), 
CONSTRAINT PRODUCT_LINE_ID_FK FOREIGN KEY (LINE_ID) REFERENCES LINE(LINE_ID)
);

DROP TABLE IF EXISTS RETAILER;
CREATE TABLE RETAILER 
(RETAILER_ID VARCHAR(4) PRIMARY KEY,
NAME CHAR(50),
ADDRESS CHAR(50), 
PHONE_NUMBER CHAR(12)
);

DROP TABLE IF EXISTS DISTRIBUTION;
CREATE TABLE DISTRIBUTION 
(TRANSACTION_ID VARCHAR(4) PRIMARY KEY,
PRODUCT_ID VARCHAR(4),
SHIPPING_QUANTITY CHAR(10),
RETAILER_ID VARCHAR(4),
ORDER_DATE DATE,
SHIPPING_DEADLINE DATE, 
CONSTRAINT DISTRIBUTION_PRODUCT_ID_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID),
CONSTRAINT DISTRIBUTION_RETAILER_ID_FK FOREIGN KEY (RETAILER_ID) REFERENCES RETAILER(RETAILER_ID)
);

DROP TABLE IF EXISTS CHASE;
CREATE TABLE CHASE 
(CHASE_ID VARCHAR(4) PRIMARY KEY,
PRODUCT_ID VARCHAR(4),
PRODUCT_NAME CHAR(50),
DESC_OF_DIFF CHAR(255),
CONSTRAINT CHASE_PRODUCT_ID_FK FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCT(PRODUCT_ID)
);


## INSERT VALUES INTO TABLES ##

INSERT INTO LINE
VALUES
(1971, 'Animation', 'Naruto', 'Ongoing');
INSERT INTO LINE
VALUES
(1973, 'Movies', 'The Batman', 'Ongoing');
INSERT INTO LINE
VALUES
(1984, 'Movies', 'Doctor Strange', 'Complete');
INSERT INTO LINE
VALUES
(1999, 'Television', 'The Flash', 'Ongoing');
INSERT INTO LINE
VALUES
(2050, 'Animation', 'Demon Slayer', 'Ongoing');
INSERT INTO LINE
VALUES
(2052, 'Animation', 'My Hero Academia', 'Ongoing');

INSERT INTO PRODUCT
VALUES
(1189, 1973, 'Batman', 'None', 'yes', 2500);
INSERT INTO PRODUCT
VALUES
(1193, 1973, 'Bruce Wayne', 'Target', 'no', 2500);
INSERT INTO PRODUCT
VALUES
(739, 1971, 'Rock Lee', 'Hot Topic', 'no', 1500);
INSERT INTO PRODUCT
VALUES
(932, 1971, 'Naruto (Six Path Sage)', 'Hot Topic', 'no', 1000);
INSERT INTO PRODUCT
VALUES
(504, 1999, 'The Flash (Metallic)', 'Boxlunch', 'no', 1500);
INSERT INTO PRODUCT
VALUES
(803, 2052, 'Katsuki Bakugo', 'Hot Topic', 'no', 150);
INSERT INTO PRODUCT
VALUES
(907, 2050, 'Tanjiro', 'None', 'no', 2700);
INSERT INTO PRODUCT
VALUES
(908, 2050, 'Nezuko', 'None', 'no', 2650);
INSERT INTO PRODUCT
VALUES
(910, 2050, 'Lounging Inosuke', 'Boxlunch', 'no', 2000);
INSERT INTO PRODUCT
VALUES
(605, 1984, 'Wong', 'None', 'no', 1000);
INSERT INTO PRODUCT
VALUES 
(606, 1984, 'Doctor Strange', 'None', 'yes', 2000);

INSERT INTO RETAILER
VALUES
(1, 'Hot Topic', '324 MerryFlower Ln', '219-234-5243');
INSERT INTO RETAILER
VALUES
(2, 'Boxlunch', 'Southview Mall', '219-354-6787');
INSERT INTO RETAILER
VALUES
(3, 'Target', '142 SpringHill Dr', '219-423-2343');
INSERT INTO RETAILER
VALUES
(4, 'FYE', 'NorthWood Mall', '219-876-4587');
INSERT INTO RETAILER
VALUES
(5, 'Best Buy', '120 Hillside Way', '219-034-2034');

INSERT INTO DISTRIBUTION
VALUES
(0001, 1189, 200, 1, '2022-05-01', '2022-05-06');
INSERT INTO DISTRIBUTION
VALUES
(0002, 1193, 250, 3, '2022-05-01', '2022-05-06');
INSERT INTO DISTRIBUTION
VALUES
(0003, 739, 200, 1, '2022-05-02', '2022-05-07');
INSERT INTO DISTRIBUTION
VALUES
(0004, 504, 300, 2, '2022-05-03', '2022-05-08');
INSERT INTO DISTRIBUTION
VALUES
(0005, 1189, 400, 4, '2022-05-04', '2022-05-09');
INSERT INTO DISTRIBUTION
VALUES
(0006, 803, 250, 1, '2022-05-05', '2022-05-10');
INSERT INTO DISTRIBUTION
VALUES
(0007, 907, 350, 3, '2022-05-06', '2022-05-11');
INSERT INTO DISTRIBUTION
VALUES
(0008, 908, 300, 3, '2022-05-07', '2022-05-12');
INSERT INTO DISTRIBUTION
VALUES
(0009, 606, 250, 5, '2022-05-07', '2022-05-12');

INSERT INTO CHASE
VALUES
(001, 1189, 'Batman Glow Chase', 'Glow in the dark eyes and orange details around the boots and gloves. Identifiable by glow chase sticker.');
INSERT INTO CHASE
VALUES
(002, 606, 'Doctor Strange Chase', 'Color variation in suit. Original is blue while chase has eyeball pattern in blue. Identifiable by limited edition chase sticker.');

## VIEW TABLES ##

SELECT * FROM LINE;
SELECT * FROM PRODUCT;
SELECT * FROM RETAILER;
SELECT * FROM DISTRIBUTION;
SELECT * FROM CHASE;

## QUERIES ##

## DISPLAY THE TITLE OF EACH LINE OF PRODUCTS ##
SELECT LINE_NAME FROM LINE;

## WHAT IS THE TRANSACTION ID, PRODUCT ID, AND SHIPPING QUANTITY OF ALL ORDERS TO HOT TOPIC (RETAILER 1)? ##
SELECT TRANSACTION_ID, PRODUCT_ID, SHIPPING_QUANTITY FROM DISTRIBUTION WHERE RETAILER_ID = '1';

## WHAT IS THE PRODUCT ID, NAME, AND LINE ID OF ALL PRODUCTS EXCLUSIVE TO HOT TOPIC STORES AND OF WHICH WE HAVE OVER 500 UNITS IN STOCK? ##
SELECT PRODUCT_ID, PRODUCT_NAME, LINE_ID FROM PRODUCT WHERE EXCLUSIVITY = 'Hot Topic' AND QUANTITY > 500;

## WHAT IS THE ID AND TITLE OF ALL PRODUCTS WITH CHASE VARIANTS? ##
SELECT PRODUCT_ID, PRODUCT_NAME FROM PRODUCT WHERE CHASE_VARIANT LIKE 'yes'; 

## WHAT IS THE AVERAGE QUANTITY ORDERED BY THE HOT TOPIC RETAILER? ##
SELECT AVG (SHIPPING_QUANTITY) AS 'Average Quantity Ordered' FROM DISTRIBUTION WHERE RETAILER_ID = '1';

## WHAT IS THE RETAILER ID, NAME AND TOTAL QUANTITY OF FUNKO POPS ORDERED BY EACH RETAILER THIS WEEK? ##
SELECT D.RETAILER_ID, R.NAME, SUM(SHIPPING_QUANTITY) AS 'SUM OF QUANTITY' FROM DISTRIBUTION D, RETAILER R 
WHERE D.RETAILER_ID = R.RETAILER_ID 
GROUP BY D.RETAILER_ID;

## WHAT IS EVERY PRODUCT ID, NAME, AND LINE THAT OUR WAREHOUSE STORES? JOIN THE PRODUCT AND LINE LIST TO CREATE A NEW LIST ##
SELECT P.PRODUCT_ID, P.PRODUCT_NAME, L.LINE_NAME AS 'PRODUCT LINE' 
FROM PRODUCT P
INNER JOIN LINE L ON P.LINE_ID = L.LINE_ID ORDER BY L.LINE_NAME;

## SELECT ALL LINES WHICH ARE IN THE MOVIES OR TELEVISION CATEGORY FOR THE WAREHOUSE TEAM TO SORT OUT ##
SELECT * FROM LINE WHERE CATEGORY IN ('Movies', 'Television');

## WHAT IS THE LINE, PRODUCT NAME, AND EXCLUSIVITY OF ALL EXCLUSIVE PRODUCTS? NO PRODUCTS WITH 'NONE' IN EXCLUSIVITY SHOULD BE DISPLAYED ##
SELECT P.PRODUCT_NAME AS 'PRODUCT', L.LINE_NAME AS 'PRODUCT LINE', P.EXCLUSIVITY FROM LINE L, PRODUCT P WHERE L.LINE_ID = P.LINE_ID AND EXCLUSIVITY NOT LIKE 'None';

## JOIN THE DISTRIBUTION AND RETAILER TABLES TO CREATE A LIST WHICH DISPLAYS ALL TRANSACTIONS' RETAILERS, RETAILER ADDRESS, ORDER DATE, AND SHIPPING DEADLINE FOR THE SHIPPING TEAM##
SELECT D.TRANSACTION_ID, R.NAME AS 'RETAILER', R.ADDRESS, D.ORDER_DATE, D.SHIPPING_DEADLINE
FROM DISTRIBUTION D
INNER JOIN RETAILER R ON D.RETAILER_ID = R.RETAILER_ID ORDER BY TRANSACTION_ID ASC; 

## LIST THE NAMES OF PRODUCTS WHICH WERE ORDERED IN QUANTITIES OVER 250 ##
SELECT ALL PRODUCT_NAME FROM PRODUCT WHERE PRODUCT_ID = ANY (SELECT PRODUCT_ID FROM DISTRIBUTION WHERE SHIPPING_QUANTITY > 250);



